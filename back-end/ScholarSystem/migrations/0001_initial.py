# Generated by Django 4.2 on 2025-06-18 22:27

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('domain', models.CharField(max_length=100)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('document', models.FileField(upload_to='documents/')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='covers/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attachments', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, default=list, size=None)),
                ('likes', models.IntegerField(default=0)),
                ('comments', models.JSONField(default=list)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('file_url', models.URLField()),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('document_type', models.CharField(max_length=50)),
                ('metadata', models.JSONField(default=dict)),
                ('is_public', models.BooleanField(default=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ChatbotInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('response', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('context', models.JSONField(default=dict)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='publication',
            index=django.contrib.postgres.indexes.GinIndex(fields=['tags'], name='ScholarSyst_tags_ec7df2_gin'),
        ),
        migrations.AddIndex(
            model_name='publication',
            index=django.contrib.postgres.indexes.GinIndex(fields=['metadata'], name='ScholarSyst_metadat_699e3c_gin'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=django.contrib.postgres.indexes.GinIndex(fields=['metadata'], name='ScholarSyst_metadat_79a08a_gin'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=django.contrib.postgres.indexes.GinIndex(fields=['tags'], name='ScholarSyst_tags_5cba37_gin'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='ScholarSyst_search__8dd9c4_gin'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['sender', 'receiver', 'timestamp'], name='ScholarSyst_sender__c96ff3_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=django.contrib.postgres.indexes.GinIndex(fields=['metadata'], name='ScholarSyst_metadat_be90db_gin'),
        ),
        migrations.AddIndex(
            model_name='chatbotinteraction',
            index=models.Index(fields=['user', 'timestamp'], name='ScholarSyst_user_id_53ac33_idx'),
        ),
        migrations.AddIndex(
            model_name='chatbotinteraction',
            index=django.contrib.postgres.indexes.GinIndex(fields=['context', 'metadata'], name='ScholarSyst_context_e4680c_gin'),
        ),
    ]
